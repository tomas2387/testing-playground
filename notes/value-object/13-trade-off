
Its nice to see where we can see in the codebase this code smells.
Too many layers? Too many indirections? Is a problem.
Getting a data in some thing and out of a thing, maybe its time to simplify. Its not useful.

----

If we have Money object, lets use it.
Should we write an http client? not a good idea. We are gonna have the same problems as them.
But the domain is not likely the same. Ex: Money VO, how many decimals? our business maybe is not the same as the library owner.
- But first solve the problem for your case, and then think about bringing a VO library.

----

Evolutionary design: means of start of an idea and then start evolving. With diff types of objects and etc etc
Building blocks first is starting a visualization of the big picture.

If you start building blocks first, maybe you start creating some VO, and then the changeability of the project is compromised.
Instead of grasping all in one go, maybe its a good idea to start small and evolve from there.

----

